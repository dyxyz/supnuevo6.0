import React, {Component} from 'react';import {    NetInfo,    AppRegistry,    StyleSheet,    TouchableHighlight,    ScrollView,    Image,    Text,    TextInput,    ListView,    View,    Alert,    TouchableOpacity,    Platform,    ActivityIndicator,    FlatList} from 'react-native';import {connect} from 'react-redux';import Config from '../../../../config';import {setSpText} from '../../../utils/ScreenUtil'const Dimensions = require('Dimensions');const {height, width} = Dimensions.get('window');const proxy = require('../../../proxy/Proxy');import Accordion from 'react-native-collapsible/Accordion';import Icon from 'react-native-vector-icons/FontAwesome';import GoodUpdate from '../../GoodUpdate'import GoodAdd from '../../GoodAdd'import Modal from "react-native-modalbox";class CodigoRelation extends Component {    componentDidMount(): void {        this.getSupnuevoCodigoList();    }    getSupnuevoCodigoList(){        this.setState({showProgress:true})        proxy.postes({            url: Config.server + "/func/commodity/getSupnuevoCommodityCodigoMapCodigoList",            headers: {                'Content-Type': 'application/json',            },            body: {                unionId:this.props.unionId,            }        }).then((json)=> {            this.setState({showProgress:false})            console.log(json)            if(json.re == 1){                this.setState({codigoList:json.data})            }        }).catch((err)=>{alert(err);});    }    cancel() {        const {navigator} = this.props;        if (navigator) {            navigator.pop();        }    }    constructor(props) {        super(props);        this.state = {            commodityList:null,            taxArr: [],            sizeArr: [],            showProgress:false,            activeSections:[],            codigoList:[],            codigo:null,            subCodigo:null,            selectedCodigo:null,        }    }    render() {        const data=this.state.codigoList        return (            <View style={{flex: 1}}>                {/*header*/}                <View style={[{backgroundColor:'#387ef5',padding:4,paddingTop:Platform.OS=='ios'?40:15,justifyContent: 'center',alignItems: 'center',flexDirection:'row'},styles.card]}>                    <View style={{flex:1,paddingLeft:10}}>                        <TouchableOpacity                            style={{flexDirection:'row',height:40,paddingTop:3}}                            onPress={                                ()=>{                                    this.cancel();                                }                            }>                            <Icon name="arrow-left" size={20} color="#fff" />                        </TouchableOpacity>                    </View>                    <View>                        <Text style={{fontSize: setSpText(20), flex: 3, textAlign: 'center', color: '#fff'}}>                            Supnuevo(6.0)-{this.props.username}                        </Text>                    </View>                    <View style={{flex:1,marginRight:10,flexDirection:'row',justifyContent:'flex-end'}}>                        <TouchableOpacity                            style={{flexDirection:'row',height:40,paddingTop:3}}                            onPress={                                ()=>{                                    this.refs.modal.open()                                }                            }>                            <Icon name="plus-circle" size={30} color="#fff" />                        </TouchableOpacity>                    </View>                </View>                <ScrollView style={{flex:1,marginBottom:40}}>                    <Accordion                        activeSections={this.state.activeSections}                        sections={data}                        // renderSectionTitle={this._renderSectionTitle}                        renderHeader={this._renderHeader}                        renderContent={this._renderContent}                        onChange={this._updateSections}                    />                </ScrollView>                {this._renderModal()}                <Modal                    animationType={"fade"}                    transparent={true}                    visible={this.state.showProgress}                    onRequestClose={() => {                        this.setState({showProgress: false})                    }}                >                    <View style={[styles.modalContainer, styles.modalBackgroundStyle]}>                        <ActivityIndicator                            animating={true}                            style={[{height: 80}]}                            size="large"                            color="black"                        />                        <View style={{flexDirection: 'row', justifyContent: 'center'}}>                            <Text style={{color: '#000', fontSize: 22, alignItems: 'center'}}>                                请求中。。。                            </Text>                        </View>                    </View>                </Modal>            </View>        )    }    _renderModal(){        return(            <Modal                style={styles.modalbox}                position={"center"}                ref={"modal"}                transparent={false}                animationType={"slide"}            >                    <View style={{flex:1,width:width*0.8,padding:20,justifyContent:'space-around',alignItems:'center',backgroundColor:'#387ef5'}}>                        <TextInput                            style={{width:width*0.7,backgroundColor:'#fff',borderRadius:5,padding:5,height:35, color:"black",}}                            placeholder={'请输入条码'}                            onChangeText={(value) =>{                                if(this.state.selectedCodigo==null){                                    this.setState({codigo:value})                                }                                else{                                    this.setState({subCodigo:value})                                }                            }}                        />                        <TouchableOpacity onPress={()=>{this.addHeadCodigo()}}>                            <View style={{width:width*0.35,justifyContent:'center',alignItems:'center',padding:10,borderRadius:5,backgroundColor:'#fff'}}>                                <Text allowFontScaling={false}>添加</Text>                            </View>                        </TouchableOpacity>                    </View>            </Modal>        );    }    _renderHeader = (section,index) => {        return (            <View style={styles.header}>                <View style={{flexDirection:'row'}}>                    {index==this.state.activeSections[0]?                        <Icon name="caret-down" size={30} color='black' />                        :                        <Icon name="caret-right" size={30} color='black' />                    }                    {/*<Icon name="caret-right" size={30} color='black' />*/}                    <Text style={styles.headerText}>{section.codigo}</Text>                </View>                <View style={{flexDirection:'row'}}>                    <TouchableOpacity                        onPress={()=>{this.refs.modal.open();this.setState({selectedCodigo:section.codigo})}}                    >                        <Icon style={{marginRight:10}} name="plus-circle" size={30} color='green' />                    </TouchableOpacity>                    <TouchableOpacity                        onPress={() => {                            Alert.alert('提示', '是否删除该条码',                                [                                    {                                        text: "确定",                                        onPress: () => this.deleteHeadCodigo(section.codigo,section.mapId)                                    },                                    {text: "取消"},                                ]                            );                        }}                    >                        <Icon  name="minus-circle" size={30} color='red' />                    </TouchableOpacity>                </View>            </View>        );    };    _renderContent = section => {        return (            <FlatList                style={{height:'auto'}}                data={section.codigoSubList}                renderItem={({item,index})=>this._renderClassItem(item,index)}            />        );    };    _updateSections = activeSections => {        console.log(activeSections)        this.setState({ activeSections });    };    _renderClassItem(rowData,index){        return(            <TouchableOpacity                // onPress={()=>this.selectClass(rowData.taxId)}            >                <View style={{width:width,alignItems:'center'}}>                    <View style={styles.minClass}>                        <View>                            <Text style={{fontSize:16}}>{rowData.codigoSub}</Text>                        </View>                        <TouchableOpacity                            onPress={() => {                                Alert.alert('提示', '是否删除该条码',                                    [                                        {                                            text: "确定",                                            onPress: () => this.deleteSubCodigo(rowData.mapId)                                        },                                        {text: "取消"},                                    ]                                );                            }}                        >                            <Icon  name="times-circle" size={24} color='red' />                        </TouchableOpacity>                    </View>                </View>            </TouchableOpacity>        );    }    addHeadCodigo(){        if(this.state.selectedCodigo==null){            proxy.postes({                url: Config.server + "/func/commodity/addSupnuevoCommodityCodigoMap",                headers: {                    'Content-Type': 'application/json',                },                body: {                    codigo:this.state.codigo,                }            }).then((json)=> {                this.refs.modal.close();                console.log(json)                if(json.re == 1){                    alert('添加成功')                }                else{                    alert(json.data)                }                this.getSupnuevoCodigoList()            }).catch((err)=>{alert(err);});        }        else{            proxy.postes({                url: Config.server + "/func/commodity/addSupnuevoCommodityCodigoMapSub",                headers: {                    'Content-Type': 'application/json',                },                body: {                    codigo:this.state.selectedCodigo,                    codigoSub:this.state.subCodigo                }            }).then((json)=> {                this.refs.modal.close();                console.log(json)                if(json.re == 1){                    alert('添加成功')                }                else{                    alert(json.data)                }                this.getSupnuevoCodigoList()                this.setState({selectedCodigo:null})            }).catch((err)=>{alert(err);});        }    }    deleteHeadCodigo(codigo,mapId){        proxy.postes({            url: Config.server + "/func/commodity/deleteSupnuevoCommodityCodigoMap",            headers: {                'Content-Type': 'application/json',            },            body: {                codigo:codigo,                mapId:mapId            }        }).then((json)=> {            this.refs.modal.close();            console.log(json)            if(json.re == 1){                alert('删除成功')            }            else{                alert(json.data)            }            this.getSupnuevoCodigoList()        }).catch((err)=>{alert(err);});    }    deleteSubCodigo(mapId){        proxy.postes({            url: Config.server + "/func/commodity/deleteSupnuevoCommodityCodigoMapSub",            headers: {                'Content-Type': 'application/json',            },            body: {                mapId:mapId            }        }).then((json)=> {            this.refs.modal.close();            console.log(json)            if(json.re == 1){                alert('删除成功')            }            this.getSupnuevoCodigoList()        }).catch((err)=>{alert(err);});    }    navigateGoodUpdate(codigo,commodityId) {        const {navigator} = this.props;        const {merchantId} = this.props;        proxy.postes({            url: Config.server + '/func/commodity/getSupnuevoCommodityTaxInfoListMobile',            headers: {                'Content-Type': 'application/json',            },            body: {                merchantId: merchantId            }        }).then((json) => {            var errorMsg = json.errorMsg;            if (errorMsg !== null && errorMsg !== undefined && errorMsg !== "") {                alert(errorMsg);            } else {                var taxArr = new Array();                var sizeArr = new Array();                json.taxArr.map(function (index, i) {                    taxArr.push(index);                })                json.sizeArr.map(function (index, i) {                    sizeArr.push(index);                })                for (var i = 0; i < taxArr.length; i++) {                    var o = {'value': '', 'label': ''};                    o.label = taxArr[i].label;                    o.value = taxArr[i].value;                    this.state.taxArr.push(o);                }                for (var i = 0; i < sizeArr.length; i++) {                    var o = {'value': '', 'label': ''};                    o.label = sizeArr[i].label;                    o.value = sizeArr[i].value;                    this.state.sizeArr.push(o);                }                if (codigo !== undefined && codigo != null && codigo !== '') {                    if (navigator) {                        navigator.push({                            name: 'GoodAdd',                            component: GoodAdd,                            params: {                                merchantId: merchantId,                                taxArr: this.state.taxArr,                                sizeArr: this.state.sizeArr,                                commodityId:commodityId,                                codigo:codigo,                            }                        })                    }                } else {                    alert('请先选择要修改的商品！');                }            }        }).catch((err) => {            setTimeout(() => {                Alert.alert(                    '错误',                    err,                    [                        {                            text: 'OK', onPress: () => {                            }                        },                    ]                );            }, 900)        });    }}var styles = StyleSheet.create({    stateWrapper:{        // flex:1,        // alignItems:'center',        // justifyContent: 'center'        // borderWidth:1,        marginTop:height*0.01,        width:width*0.9,        // paddingTop:20,        // alignSelf:"flex-start"    },    stateText:{        fontSize:16,        margin:2,        lineHeight:18,    },    header:{        width:width,        padding:10,        height:'auto',        flexDirection:'row',        borderBottomWidth:1,        borderColor:'#9e9ca3',        alignItems:'center',        justifyContent:'space-between'    },    headerText:{        fontSize:20,        fontWeight:'bold',        color:'black',        marginLeft:10    },    minClass:{        width:width*0.95,        padding:8,        height:'auto',        // borderTopWidth:1,        borderBottomWidth:1,        // borderBottomColor:'white',        flexDirection:'row',        justifyContent:'space-between'        // borderColor:'gray'    },    modalContainer: {        flex: 1,        justifyContent: 'center',        padding: 8,    },    modalBackgroundStyle: {        backgroundColor: 'rgba(0,0,0,0.3)'    },    modalbox:{        justifyContent:'center',        alignItems:'center',        height:height*0.4,        // minHeight:400,        width:width*0.8,    },});module.exports = connect(state => ({        unionId: state.user.unionId,        merchantId: state.user.supnuevoMerchantId,        username: state.user.username,        supnuevoMerchantId: state.user.supnuevoMerchantId,        sessionId: state.user.sessionId,        unionMemberType:state.user.unionMemberType,    }))(CodigoRelation);