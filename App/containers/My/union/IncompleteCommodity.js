import React, {Component} from 'react';import {    NetInfo,    AppRegistry,    StyleSheet,    TouchableHighlight,    ScrollView,    Image,    Text,    TextInput,    ListView,    View,    Alert,    Modal,    TouchableOpacity,    Platform,    ActivityIndicator,    FlatList} from 'react-native';import {connect} from 'react-redux';import Config from '../../../../config';import {setSpText} from '../../../utils/ScreenUtil'const Dimensions = require('Dimensions');const {height, width} = Dimensions.get('window');const proxy = require('../../../proxy/Proxy');import Icon from 'react-native-vector-icons/FontAwesome';import GoodUpdate from '../../GoodUpdate'import GoodAdd from '../../GoodAdd'class IncompleteCommodity extends Component {    componentDidMount(): void {        this.getSupnuevoIncompleteCommodityList();    }    getSupnuevoIncompleteCommodityList(){        proxy.postes({            url: Config.server + "/func/union/getIncompleteCommodityCodigoList",            headers: {                'Content-Type': 'application/json',            },            body: {                unionId:this.props.unionId            }        }).then((json)=> {            console.log(json)            if(json.re == 1){                this.setState({commodityList:json.data})            }        }).catch((err)=>{alert(err);});    }    cancel() {        const {navigator} = this.props;        if (navigator) {            navigator.pop();        }    }    constructor(props) {        super(props);        this.state = {            commodityList:null,            taxArr: [],            sizeArr: [],        }    }    render() {        return (            <ScrollView>                <View style={{flex: 1}}>                    {/*header*/}                    <View style={[{backgroundColor:'#387ef5',padding:4,paddingTop:Platform.OS=='ios'?40:15,justifyContent: 'center',alignItems: 'center',flexDirection:'row'},styles.card]}>                        <View style={{flex:1,paddingLeft:10}}>                            <TouchableOpacity                                style={{flexDirection:'row',height:40,paddingTop:3}}                                onPress={                                    ()=>{                                        this.cancel();                                    }                                }>                                <Icon name="arrow-left" size={20} color="#fff" />                            </TouchableOpacity>                        </View>                        <View>                            <Text style={{fontSize: setSpText(20), flex: 3, textAlign: 'center', color: '#fff'}}>                                Supnuevo(6.0)-{this.props.username}                            </Text>                        </View>                        <View style={{flex:1,marginRight:10,flexDirection:'row',justifyContent:'flex-end'}}>                            <TouchableOpacity                                style={{flexDirection:'row',height:40,paddingTop:3}}                                onPress={                                    ()=>{                                        this.getSupnuevoIncompleteCommodityList();                                    }                                }>                                <Icon name="repeat" size={20} color="#fff" />                            </TouchableOpacity>                        </View>                    </View>                    <View style={{height: height - 140,}}>                        <View style={{flex: 2}}>                            <FlatList                                data={this.state.commodityList}                                renderItem={({item,index})=>this._renderCommodityItem(item,index)}                            />                            <View style={{flex: 1}}/>                        </View>                    </View>                </View>            </ScrollView>)    }    _renderCommodityItem(rowData,index){        return(            <TouchableOpacity style={[{borderTopWidth: 1}, styles.touch]}                              onPress={() => {                                  this.navigateGoodUpdate(rowData.codigo,rowData.commodityId);                              }}>                <Text style={styles.text}>{rowData.codigo}</Text>            </TouchableOpacity>        );    }    navigateGoodUpdate(codigo,commodityId) {        const {navigator} = this.props;        const {merchantId} = this.props;        proxy.postes({            url: Config.server + '/func/commodity/getSupnuevoCommodityTaxInfoListMobile',            headers: {                'Content-Type': 'application/json',            },            body: {                merchantId: merchantId            }        }).then((json) => {            var errorMsg = json.errorMsg;            if (errorMsg !== null && errorMsg !== undefined && errorMsg !== "") {                alert(errorMsg);            } else {                var taxArr = new Array();                var sizeArr = new Array();                json.taxArr.map(function (index, i) {                    taxArr.push(index);                })                json.sizeArr.map(function (index, i) {                    sizeArr.push(index);                })                for (var i = 0; i < taxArr.length; i++) {                    var o = {'value': '', 'label': ''};                    o.label = taxArr[i].label;                    o.value = taxArr[i].value;                    this.state.taxArr.push(o);                }                for (var i = 0; i < sizeArr.length; i++) {                    var o = {'value': '', 'label': ''};                    o.label = sizeArr[i].label;                    o.value = sizeArr[i].value;                    this.state.sizeArr.push(o);                }                if (codigo !== undefined && codigo != null && codigo !== '') {                    if (navigator) {                        navigator.push({                            name: 'GoodAdd',                            component: GoodAdd,                            params: {                                merchantId: merchantId,                                taxArr: this.state.taxArr,                                sizeArr: this.state.sizeArr,                                commodityId:commodityId,                                codigo:codigo,                            }                        })                    }                } else {                    alert('请先选择要修改的商品！');                }            }        }).catch((err) => {            setTimeout(() => {                Alert.alert(                    '错误',                    err,                    [                        {                            text: 'OK', onPress: () => {                            }                        },                    ]                );            }, 900)        });    }}var styles = StyleSheet.create({    text: {        fontSize: 20,        paddingLeft: 10,        borderColor: '#DEDEDE',        borderLeftWidth: 1,        marginLeft:5,    },    touch: {        // flex: 1,        height:'auto',        marginRight: 10,        marginLeft: 10,        borderBottomWidth: 1,        alignItems: 'center',        flexDirection: 'row',        borderColor: '#DEDEDE',        padding:10,    },    card: {        borderTopWidth: 0,        borderBottomWidth: 1,        borderBottomColor: 'rgba(0,0,0,0.1)',        shadowColor: '#ccc',        shadowOffset: {width: 2, height: 2,},        shadowOpacity: 0.5,        shadowRadius: 3,    },    preview: {        flex: 1,        justifyContent: 'flex-end',        alignItems: 'center',    },    overlay: {        position: 'absolute',        padding: 16,        right: 0,        left: 0,        alignItems: 'center',    },    box: {        position: 'absolute',        right: 1 / 2 * width - 100,        top: 1 / 2 * height - 100,        height: 200,        width: 200,        borderWidth: 1,        borderColor: '#387ef5',        backgroundColor: 'transparent'    },    bottomOverlay: {        bottom: 0,        backgroundColor: 'rgba(0,0,0,0.4)',        flexDirection: 'row',        justifyContent: 'center',        alignItems: 'center',    },    captureButton: {        padding: 15,        backgroundColor: 'white',        borderRadius: 40,    },    modalContainer: {        flex: 1,        justifyContent: 'center',        padding: 8,    },    modalBackgroundStyle: {        backgroundColor: 'rgba(0,0,0,0.3)'    },});module.exports = connect(state => ({        unionId: state.user.unionId,        merchantId: state.user.supnuevoMerchantId,        username: state.user.username,        supnuevoMerchantId: state.user.supnuevoMerchantId,        sessionId: state.user.sessionId,        unionMemberType:state.user.unionMemberType,    }))(IncompleteCommodity);